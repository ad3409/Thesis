import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import tkinter as tk
from tkinter import filedialog

# Function to upload dataset
def upload_file():
    root = tk.Tk()
    root.withdraw()  # Hide the root window
    file_path = filedialog.askopenfilename(
        title="Select your dataset",
        filetypes=[("CSV Files", "*.csv"), ("Excel Files", "*.xlsx;*.xls")]
    )
    return file_path

# Load dataset
def load_data(file_path):
    if file_path.endswith(".csv"):
        return pd.read_csv(file_path)
    elif file_path.endswith(".xlsx") or file_path.endswith(".xls"):
        return pd.read_excel(file_path)
    else:
        raise ValueError("Unsupported file format. Please upload a CSV or Excel file.")

# Generate a heatmap
def plot_heatmap(df, dimension):
    ethical_columns = [
        "Trust", "Dignity", "Privacy", "Responsibility", "Justice", 
        "Inequality", "Exploitation", "Exclusion", "Domination", 
        "Discrimination", "Autonomy", "Truth"
    ]
    
    # Ensure all required columns exist
    for col in ethical_columns:
        if col not in df.columns:
            raise ValueError(f"Missing required column: {col}")

    # Filter data for the selected dimension
    df_filtered = df[df["Dimension"] == dimension].set_index("Model")[ethical_columns]

    # Generate heatmap
    plt.figure(figsize=(12, 6))
    sns.heatmap(df_filtered, annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5)

    # Formatting
    plt.title(f"Ethical Aspects Heatmap for {dimension}")
    plt.xlabel("Ethical Metrics")
    plt.ylabel("Models")
    
    # Save and show plot
    plt.savefig(f"heatmap_{dimension}.png")
    plt.show()

# Main function
def main():
    print("Please select the dataset file (CSV or Excel).")
    file_path = upload_file()
    
    if not file_path:
        print("No file selected. Exiting.")
        return
    
    try:
        df = load_data(file_path)
        
        # Ensure required columns exist
        required_columns = ["Model", "Dimension"] + [
            "Trust", "Dignity", "Privacy", "Responsibility", "Justice", 
            "Inequality", "Exploitation", "Exclusion", "Domination", 
            "Discrimination", "Autonomy", "Truth"
        ]
        for col in required_columns:
            if col not in df.columns:
                raise ValueError(f"Missing required column: {col}")

        # Generate heatmaps for all three dimensions
        for dimension in ["E-Voting", "Finance", "Health"]:
            plot_heatmap(df, dimension)
    
    except Exception as e:
        print(f"Error: {e}")

# Run the script
if __name__ == "__main__":
    main()
